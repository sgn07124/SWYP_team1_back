# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash # Gradle wrapper 스크립트에 실행 권한을 부여합니다. 이를 통해 빌드 명령을 실행할 수 있습니다.

#      - name: Build with Gradle Wrapper
#        run: ./gradlew build

      - name: Clean and Build with Gradle Wrapper
        run: ./gradlew bootJar # Gradle Wrapper를 사용하여 Java 프로젝트를 빌드합니다.

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"
        # 현재 시간을 가져오는 액션을 실행합니다. 이를 통해 빌드 시점의 시간 정보를 확보할 수 있습니다.

      - name: Show Current Time
        run: echo "CurrentTime=$"
        shell: bash # 앞서 가져온 현재 시간을 출력합니다. 이는 로깅 및 디버깅 목적으로 유용할 수 있습니다.

      # Docker build & Push
      - name: Docker build & push to Docker hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

      # EC2 배포
      - name: Docker image pull & Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker image prune -a -f