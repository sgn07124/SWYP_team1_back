# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # 1. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Build the Spring Boot application
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Clean and Build with Gradle Wrapper
        run: ./gradlew bootJar

      # 3. Get current time
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{ steps.current-time.outputs.formatted }}"

      # 4. Docker image build
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server:latest .

      # 5. DockerHub login
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. DockerHub image push
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server:latest




      # Docker build & Push : Docker 이미지를 빌드하고, Docker Hub에 로그인한 후 이미지를 푸시합니다. - 3,4,5번 삭제 후 적용
#      - name: Docker build & push to Docker hub
 #       run: |
  #        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
   #       docker build -t ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server .
    #      docker push ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server

