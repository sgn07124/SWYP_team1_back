# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash # Gradle wrapper 스크립트에 실행 권한을 부여합니다. 이를 통해 빌드 명령을 실행할 수 있습니다.

#      - name: Build with Gradle Wrapper
#        run: ./gradlew build

      - name: Clean and Build with Gradle Wrapper
        run: ./gradlew bootJar # Gradle Wrapper를 사용하여 Java 프로젝트를 빌드합니다.

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"
        # 현재 시간을 가져오는 액션을 실행합니다. 이를 통해 빌드 시점의 시간 정보를 확보할 수 있습니다.

      - name: Show Current Time
        run: echo "CurrentTime=$"
        shell: bash # 앞서 가져온 현재 시간을 출력합니다. 이는 로깅 및 디버깅 목적으로 유용할 수 있습니다.

      # 3.Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server .

      # 4.DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. DockerHub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/swyp_team1_server

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name swyp_team1_server --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/swyp_team1_server

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f


      # Docker build & Push : Docker 이미지를 빌드하고, Docker Hub에 로그인한 후 이미지를 푸시합니다. - 3,4,5번 삭제 후 적용
#      - name: Docker build & push to Docker hub
 #       run: |
  #        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
   #       docker build -t ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server .
    #      docker push ${{ secrets.DOCKER_USERNAME }}/swyp_team1_server

